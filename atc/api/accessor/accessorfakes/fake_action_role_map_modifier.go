// Code generated by counterfeiter. DO NOT EDIT.
package accessorfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/concourse/concourse/atc/api/accessor"
)

type FakeActionRoleMapModifier struct {
	CustomizeActionRoleMapStub        func(lager.Logger, accessor.CustomActionRoleMap) error
	customizeActionRoleMapMutex       sync.RWMutex
	customizeActionRoleMapArgsForCall []struct {
		arg1 lager.Logger
		arg2 accessor.CustomActionRoleMap
	}
	customizeActionRoleMapReturns struct {
		result1 error
	}
	customizeActionRoleMapReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeActionRoleMapModifier) CustomizeActionRoleMap(arg1 lager.Logger, arg2 accessor.CustomActionRoleMap) error {
	fake.customizeActionRoleMapMutex.Lock()
	ret, specificReturn := fake.customizeActionRoleMapReturnsOnCall[len(fake.customizeActionRoleMapArgsForCall)]
	fake.customizeActionRoleMapArgsForCall = append(fake.customizeActionRoleMapArgsForCall, struct {
		arg1 lager.Logger
		arg2 accessor.CustomActionRoleMap
	}{arg1, arg2})
	fake.recordInvocation("CustomizeActionRoleMap", []interface{}{arg1, arg2})
	fake.customizeActionRoleMapMutex.Unlock()
	if fake.CustomizeActionRoleMapStub != nil {
		return fake.CustomizeActionRoleMapStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.customizeActionRoleMapReturns
	return fakeReturns.result1
}

func (fake *FakeActionRoleMapModifier) CustomizeActionRoleMapCallCount() int {
	fake.customizeActionRoleMapMutex.RLock()
	defer fake.customizeActionRoleMapMutex.RUnlock()
	return len(fake.customizeActionRoleMapArgsForCall)
}

func (fake *FakeActionRoleMapModifier) CustomizeActionRoleMapCalls(stub func(lager.Logger, accessor.CustomActionRoleMap) error) {
	fake.customizeActionRoleMapMutex.Lock()
	defer fake.customizeActionRoleMapMutex.Unlock()
	fake.CustomizeActionRoleMapStub = stub
}

func (fake *FakeActionRoleMapModifier) CustomizeActionRoleMapArgsForCall(i int) (lager.Logger, accessor.CustomActionRoleMap) {
	fake.customizeActionRoleMapMutex.RLock()
	defer fake.customizeActionRoleMapMutex.RUnlock()
	argsForCall := fake.customizeActionRoleMapArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeActionRoleMapModifier) CustomizeActionRoleMapReturns(result1 error) {
	fake.customizeActionRoleMapMutex.Lock()
	defer fake.customizeActionRoleMapMutex.Unlock()
	fake.CustomizeActionRoleMapStub = nil
	fake.customizeActionRoleMapReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeActionRoleMapModifier) CustomizeActionRoleMapReturnsOnCall(i int, result1 error) {
	fake.customizeActionRoleMapMutex.Lock()
	defer fake.customizeActionRoleMapMutex.Unlock()
	fake.CustomizeActionRoleMapStub = nil
	if fake.customizeActionRoleMapReturnsOnCall == nil {
		fake.customizeActionRoleMapReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.customizeActionRoleMapReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeActionRoleMapModifier) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.customizeActionRoleMapMutex.RLock()
	defer fake.customizeActionRoleMapMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeActionRoleMapModifier) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ accessor.ActionRoleMapModifier = new(FakeActionRoleMapModifier)
