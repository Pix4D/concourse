// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"sync"

	"github.com/concourse/concourse/atc/db"
)

type FakeGoroutineCounter struct {
	NumGoroutineStub        func() int
	numGoroutineMutex       sync.RWMutex
	numGoroutineArgsForCall []struct {
	}
	numGoroutineReturns struct {
		result1 int
	}
	numGoroutineReturnsOnCall map[int]struct {
		result1 int
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGoroutineCounter) NumGoroutine() int {
	fake.numGoroutineMutex.Lock()
	ret, specificReturn := fake.numGoroutineReturnsOnCall[len(fake.numGoroutineArgsForCall)]
	fake.numGoroutineArgsForCall = append(fake.numGoroutineArgsForCall, struct {
	}{})
	stub := fake.NumGoroutineStub
	fakeReturns := fake.numGoroutineReturns
	fake.recordInvocation("NumGoroutine", []interface{}{})
	fake.numGoroutineMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGoroutineCounter) NumGoroutineCallCount() int {
	fake.numGoroutineMutex.RLock()
	defer fake.numGoroutineMutex.RUnlock()
	return len(fake.numGoroutineArgsForCall)
}

func (fake *FakeGoroutineCounter) NumGoroutineCalls(stub func() int) {
	fake.numGoroutineMutex.Lock()
	defer fake.numGoroutineMutex.Unlock()
	fake.NumGoroutineStub = stub
}

func (fake *FakeGoroutineCounter) NumGoroutineReturns(result1 int) {
	fake.numGoroutineMutex.Lock()
	defer fake.numGoroutineMutex.Unlock()
	fake.NumGoroutineStub = nil
	fake.numGoroutineReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeGoroutineCounter) NumGoroutineReturnsOnCall(i int, result1 int) {
	fake.numGoroutineMutex.Lock()
	defer fake.numGoroutineMutex.Unlock()
	fake.NumGoroutineStub = nil
	if fake.numGoroutineReturnsOnCall == nil {
		fake.numGoroutineReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.numGoroutineReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeGoroutineCounter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.numGoroutineMutex.RLock()
	defer fake.numGoroutineMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGoroutineCounter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.GoroutineCounter = new(FakeGoroutineCounter)
