// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"sync"

	"github.com/concourse/concourse/atc/db"
)

type FakeComponentRand struct {
	IntStub        func() int
	intMutex       sync.RWMutex
	intArgsForCall []struct {
	}
	intReturns struct {
		result1 int
	}
	intReturnsOnCall map[int]struct {
		result1 int
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeComponentRand) Int() int {
	fake.intMutex.Lock()
	ret, specificReturn := fake.intReturnsOnCall[len(fake.intArgsForCall)]
	fake.intArgsForCall = append(fake.intArgsForCall, struct {
	}{})
	stub := fake.IntStub
	fakeReturns := fake.intReturns
	fake.recordInvocation("Int", []interface{}{})
	fake.intMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeComponentRand) IntCallCount() int {
	fake.intMutex.RLock()
	defer fake.intMutex.RUnlock()
	return len(fake.intArgsForCall)
}

func (fake *FakeComponentRand) IntCalls(stub func() int) {
	fake.intMutex.Lock()
	defer fake.intMutex.Unlock()
	fake.IntStub = stub
}

func (fake *FakeComponentRand) IntReturns(result1 int) {
	fake.intMutex.Lock()
	defer fake.intMutex.Unlock()
	fake.IntStub = nil
	fake.intReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeComponentRand) IntReturnsOnCall(i int, result1 int) {
	fake.intMutex.Lock()
	defer fake.intMutex.Unlock()
	fake.IntStub = nil
	if fake.intReturnsOnCall == nil {
		fake.intReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.intReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeComponentRand) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.intMutex.RLock()
	defer fake.intMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeComponentRand) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.ComponentRand = new(FakeComponentRand)
