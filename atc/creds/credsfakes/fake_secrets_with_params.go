// Code generated by counterfeiter. DO NOT EDIT.
package credsfakes

import (
	"sync"
	"time"

	"github.com/concourse/concourse/atc/creds"
)

type FakeSecretsWithParams struct {
	GetStub        func(string) (any, *time.Time, bool, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 string
	}
	getReturns struct {
		result1 any
		result2 *time.Time
		result3 bool
		result4 error
	}
	getReturnsOnCall map[int]struct {
		result1 any
		result2 *time.Time
		result3 bool
		result4 error
	}
	GetWithParamsStub        func(string, creds.SecretLookupParams) (any, *time.Time, bool, error)
	getWithParamsMutex       sync.RWMutex
	getWithParamsArgsForCall []struct {
		arg1 string
		arg2 creds.SecretLookupParams
	}
	getWithParamsReturns struct {
		result1 any
		result2 *time.Time
		result3 bool
		result4 error
	}
	getWithParamsReturnsOnCall map[int]struct {
		result1 any
		result2 *time.Time
		result3 bool
		result4 error
	}
	NewSecretLookupPathsStub        func(string, string, bool) []creds.SecretLookupPath
	newSecretLookupPathsMutex       sync.RWMutex
	newSecretLookupPathsArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 bool
	}
	newSecretLookupPathsReturns struct {
		result1 []creds.SecretLookupPath
	}
	newSecretLookupPathsReturnsOnCall map[int]struct {
		result1 []creds.SecretLookupPath
	}
	NewSecretLookupPathsWithParamsStub        func(creds.SecretLookupParams, bool) []creds.SecretLookupPath
	newSecretLookupPathsWithParamsMutex       sync.RWMutex
	newSecretLookupPathsWithParamsArgsForCall []struct {
		arg1 creds.SecretLookupParams
		arg2 bool
	}
	newSecretLookupPathsWithParamsReturns struct {
		result1 []creds.SecretLookupPath
	}
	newSecretLookupPathsWithParamsReturnsOnCall map[int]struct {
		result1 []creds.SecretLookupPath
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSecretsWithParams) Get(arg1 string) (any, *time.Time, bool, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3, fakeReturns.result4
}

func (fake *FakeSecretsWithParams) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeSecretsWithParams) GetCalls(stub func(string) (any, *time.Time, bool, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeSecretsWithParams) GetArgsForCall(i int) string {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSecretsWithParams) GetReturns(result1 any, result2 *time.Time, result3 bool, result4 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 any
		result2 *time.Time
		result3 bool
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeSecretsWithParams) GetReturnsOnCall(i int, result1 any, result2 *time.Time, result3 bool, result4 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 any
			result2 *time.Time
			result3 bool
			result4 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 any
		result2 *time.Time
		result3 bool
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeSecretsWithParams) GetWithParams(arg1 string, arg2 creds.SecretLookupParams) (any, *time.Time, bool, error) {
	fake.getWithParamsMutex.Lock()
	ret, specificReturn := fake.getWithParamsReturnsOnCall[len(fake.getWithParamsArgsForCall)]
	fake.getWithParamsArgsForCall = append(fake.getWithParamsArgsForCall, struct {
		arg1 string
		arg2 creds.SecretLookupParams
	}{arg1, arg2})
	stub := fake.GetWithParamsStub
	fakeReturns := fake.getWithParamsReturns
	fake.recordInvocation("GetWithParams", []interface{}{arg1, arg2})
	fake.getWithParamsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3, fakeReturns.result4
}

func (fake *FakeSecretsWithParams) GetWithParamsCallCount() int {
	fake.getWithParamsMutex.RLock()
	defer fake.getWithParamsMutex.RUnlock()
	return len(fake.getWithParamsArgsForCall)
}

func (fake *FakeSecretsWithParams) GetWithParamsCalls(stub func(string, creds.SecretLookupParams) (any, *time.Time, bool, error)) {
	fake.getWithParamsMutex.Lock()
	defer fake.getWithParamsMutex.Unlock()
	fake.GetWithParamsStub = stub
}

func (fake *FakeSecretsWithParams) GetWithParamsArgsForCall(i int) (string, creds.SecretLookupParams) {
	fake.getWithParamsMutex.RLock()
	defer fake.getWithParamsMutex.RUnlock()
	argsForCall := fake.getWithParamsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSecretsWithParams) GetWithParamsReturns(result1 any, result2 *time.Time, result3 bool, result4 error) {
	fake.getWithParamsMutex.Lock()
	defer fake.getWithParamsMutex.Unlock()
	fake.GetWithParamsStub = nil
	fake.getWithParamsReturns = struct {
		result1 any
		result2 *time.Time
		result3 bool
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeSecretsWithParams) GetWithParamsReturnsOnCall(i int, result1 any, result2 *time.Time, result3 bool, result4 error) {
	fake.getWithParamsMutex.Lock()
	defer fake.getWithParamsMutex.Unlock()
	fake.GetWithParamsStub = nil
	if fake.getWithParamsReturnsOnCall == nil {
		fake.getWithParamsReturnsOnCall = make(map[int]struct {
			result1 any
			result2 *time.Time
			result3 bool
			result4 error
		})
	}
	fake.getWithParamsReturnsOnCall[i] = struct {
		result1 any
		result2 *time.Time
		result3 bool
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeSecretsWithParams) NewSecretLookupPaths(arg1 string, arg2 string, arg3 bool) []creds.SecretLookupPath {
	fake.newSecretLookupPathsMutex.Lock()
	ret, specificReturn := fake.newSecretLookupPathsReturnsOnCall[len(fake.newSecretLookupPathsArgsForCall)]
	fake.newSecretLookupPathsArgsForCall = append(fake.newSecretLookupPathsArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 bool
	}{arg1, arg2, arg3})
	stub := fake.NewSecretLookupPathsStub
	fakeReturns := fake.newSecretLookupPathsReturns
	fake.recordInvocation("NewSecretLookupPaths", []interface{}{arg1, arg2, arg3})
	fake.newSecretLookupPathsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSecretsWithParams) NewSecretLookupPathsCallCount() int {
	fake.newSecretLookupPathsMutex.RLock()
	defer fake.newSecretLookupPathsMutex.RUnlock()
	return len(fake.newSecretLookupPathsArgsForCall)
}

func (fake *FakeSecretsWithParams) NewSecretLookupPathsCalls(stub func(string, string, bool) []creds.SecretLookupPath) {
	fake.newSecretLookupPathsMutex.Lock()
	defer fake.newSecretLookupPathsMutex.Unlock()
	fake.NewSecretLookupPathsStub = stub
}

func (fake *FakeSecretsWithParams) NewSecretLookupPathsArgsForCall(i int) (string, string, bool) {
	fake.newSecretLookupPathsMutex.RLock()
	defer fake.newSecretLookupPathsMutex.RUnlock()
	argsForCall := fake.newSecretLookupPathsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSecretsWithParams) NewSecretLookupPathsReturns(result1 []creds.SecretLookupPath) {
	fake.newSecretLookupPathsMutex.Lock()
	defer fake.newSecretLookupPathsMutex.Unlock()
	fake.NewSecretLookupPathsStub = nil
	fake.newSecretLookupPathsReturns = struct {
		result1 []creds.SecretLookupPath
	}{result1}
}

func (fake *FakeSecretsWithParams) NewSecretLookupPathsReturnsOnCall(i int, result1 []creds.SecretLookupPath) {
	fake.newSecretLookupPathsMutex.Lock()
	defer fake.newSecretLookupPathsMutex.Unlock()
	fake.NewSecretLookupPathsStub = nil
	if fake.newSecretLookupPathsReturnsOnCall == nil {
		fake.newSecretLookupPathsReturnsOnCall = make(map[int]struct {
			result1 []creds.SecretLookupPath
		})
	}
	fake.newSecretLookupPathsReturnsOnCall[i] = struct {
		result1 []creds.SecretLookupPath
	}{result1}
}

func (fake *FakeSecretsWithParams) NewSecretLookupPathsWithParams(arg1 creds.SecretLookupParams, arg2 bool) []creds.SecretLookupPath {
	fake.newSecretLookupPathsWithParamsMutex.Lock()
	ret, specificReturn := fake.newSecretLookupPathsWithParamsReturnsOnCall[len(fake.newSecretLookupPathsWithParamsArgsForCall)]
	fake.newSecretLookupPathsWithParamsArgsForCall = append(fake.newSecretLookupPathsWithParamsArgsForCall, struct {
		arg1 creds.SecretLookupParams
		arg2 bool
	}{arg1, arg2})
	stub := fake.NewSecretLookupPathsWithParamsStub
	fakeReturns := fake.newSecretLookupPathsWithParamsReturns
	fake.recordInvocation("NewSecretLookupPathsWithParams", []interface{}{arg1, arg2})
	fake.newSecretLookupPathsWithParamsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSecretsWithParams) NewSecretLookupPathsWithParamsCallCount() int {
	fake.newSecretLookupPathsWithParamsMutex.RLock()
	defer fake.newSecretLookupPathsWithParamsMutex.RUnlock()
	return len(fake.newSecretLookupPathsWithParamsArgsForCall)
}

func (fake *FakeSecretsWithParams) NewSecretLookupPathsWithParamsCalls(stub func(creds.SecretLookupParams, bool) []creds.SecretLookupPath) {
	fake.newSecretLookupPathsWithParamsMutex.Lock()
	defer fake.newSecretLookupPathsWithParamsMutex.Unlock()
	fake.NewSecretLookupPathsWithParamsStub = stub
}

func (fake *FakeSecretsWithParams) NewSecretLookupPathsWithParamsArgsForCall(i int) (creds.SecretLookupParams, bool) {
	fake.newSecretLookupPathsWithParamsMutex.RLock()
	defer fake.newSecretLookupPathsWithParamsMutex.RUnlock()
	argsForCall := fake.newSecretLookupPathsWithParamsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSecretsWithParams) NewSecretLookupPathsWithParamsReturns(result1 []creds.SecretLookupPath) {
	fake.newSecretLookupPathsWithParamsMutex.Lock()
	defer fake.newSecretLookupPathsWithParamsMutex.Unlock()
	fake.NewSecretLookupPathsWithParamsStub = nil
	fake.newSecretLookupPathsWithParamsReturns = struct {
		result1 []creds.SecretLookupPath
	}{result1}
}

func (fake *FakeSecretsWithParams) NewSecretLookupPathsWithParamsReturnsOnCall(i int, result1 []creds.SecretLookupPath) {
	fake.newSecretLookupPathsWithParamsMutex.Lock()
	defer fake.newSecretLookupPathsWithParamsMutex.Unlock()
	fake.NewSecretLookupPathsWithParamsStub = nil
	if fake.newSecretLookupPathsWithParamsReturnsOnCall == nil {
		fake.newSecretLookupPathsWithParamsReturnsOnCall = make(map[int]struct {
			result1 []creds.SecretLookupPath
		})
	}
	fake.newSecretLookupPathsWithParamsReturnsOnCall[i] = struct {
		result1 []creds.SecretLookupPath
	}{result1}
}

func (fake *FakeSecretsWithParams) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.getWithParamsMutex.RLock()
	defer fake.getWithParamsMutex.RUnlock()
	fake.newSecretLookupPathsMutex.RLock()
	defer fake.newSecretLookupPathsMutex.RUnlock()
	fake.newSecretLookupPathsWithParamsMutex.RLock()
	defer fake.newSecretLookupPathsWithParamsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSecretsWithParams) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ creds.SecretsWithParams = new(FakeSecretsWithParams)
