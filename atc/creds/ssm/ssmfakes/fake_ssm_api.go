// Code generated by counterfeiter. DO NOT EDIT.
package ssmfakes

import (
	"context"
	"sync"

	ssma "github.com/aws/aws-sdk-go-v2/service/ssm"
	"github.com/concourse/concourse/atc/creds/ssm"
)

type FakeSsmAPI struct {
	GetParameterStub        func(context.Context, *ssma.GetParameterInput, ...func(*ssma.Options)) (*ssma.GetParameterOutput, error)
	getParameterMutex       sync.RWMutex
	getParameterArgsForCall []struct {
		arg1 context.Context
		arg2 *ssma.GetParameterInput
		arg3 []func(*ssma.Options)
	}
	getParameterReturns struct {
		result1 *ssma.GetParameterOutput
		result2 error
	}
	getParameterReturnsOnCall map[int]struct {
		result1 *ssma.GetParameterOutput
		result2 error
	}
	GetParametersByPathStub        func(context.Context, *ssma.GetParametersByPathInput, ...func(*ssma.Options)) (*ssma.GetParametersByPathOutput, error)
	getParametersByPathMutex       sync.RWMutex
	getParametersByPathArgsForCall []struct {
		arg1 context.Context
		arg2 *ssma.GetParametersByPathInput
		arg3 []func(*ssma.Options)
	}
	getParametersByPathReturns struct {
		result1 *ssma.GetParametersByPathOutput
		result2 error
	}
	getParametersByPathReturnsOnCall map[int]struct {
		result1 *ssma.GetParametersByPathOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSsmAPI) GetParameter(arg1 context.Context, arg2 *ssma.GetParameterInput, arg3 ...func(*ssma.Options)) (*ssma.GetParameterOutput, error) {
	fake.getParameterMutex.Lock()
	ret, specificReturn := fake.getParameterReturnsOnCall[len(fake.getParameterArgsForCall)]
	fake.getParameterArgsForCall = append(fake.getParameterArgsForCall, struct {
		arg1 context.Context
		arg2 *ssma.GetParameterInput
		arg3 []func(*ssma.Options)
	}{arg1, arg2, arg3})
	stub := fake.GetParameterStub
	fakeReturns := fake.getParameterReturns
	fake.recordInvocation("GetParameter", []interface{}{arg1, arg2, arg3})
	fake.getParameterMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSsmAPI) GetParameterCallCount() int {
	fake.getParameterMutex.RLock()
	defer fake.getParameterMutex.RUnlock()
	return len(fake.getParameterArgsForCall)
}

func (fake *FakeSsmAPI) GetParameterCalls(stub func(context.Context, *ssma.GetParameterInput, ...func(*ssma.Options)) (*ssma.GetParameterOutput, error)) {
	fake.getParameterMutex.Lock()
	defer fake.getParameterMutex.Unlock()
	fake.GetParameterStub = stub
}

func (fake *FakeSsmAPI) GetParameterArgsForCall(i int) (context.Context, *ssma.GetParameterInput, []func(*ssma.Options)) {
	fake.getParameterMutex.RLock()
	defer fake.getParameterMutex.RUnlock()
	argsForCall := fake.getParameterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSsmAPI) GetParameterReturns(result1 *ssma.GetParameterOutput, result2 error) {
	fake.getParameterMutex.Lock()
	defer fake.getParameterMutex.Unlock()
	fake.GetParameterStub = nil
	fake.getParameterReturns = struct {
		result1 *ssma.GetParameterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSsmAPI) GetParameterReturnsOnCall(i int, result1 *ssma.GetParameterOutput, result2 error) {
	fake.getParameterMutex.Lock()
	defer fake.getParameterMutex.Unlock()
	fake.GetParameterStub = nil
	if fake.getParameterReturnsOnCall == nil {
		fake.getParameterReturnsOnCall = make(map[int]struct {
			result1 *ssma.GetParameterOutput
			result2 error
		})
	}
	fake.getParameterReturnsOnCall[i] = struct {
		result1 *ssma.GetParameterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSsmAPI) GetParametersByPath(arg1 context.Context, arg2 *ssma.GetParametersByPathInput, arg3 ...func(*ssma.Options)) (*ssma.GetParametersByPathOutput, error) {
	fake.getParametersByPathMutex.Lock()
	ret, specificReturn := fake.getParametersByPathReturnsOnCall[len(fake.getParametersByPathArgsForCall)]
	fake.getParametersByPathArgsForCall = append(fake.getParametersByPathArgsForCall, struct {
		arg1 context.Context
		arg2 *ssma.GetParametersByPathInput
		arg3 []func(*ssma.Options)
	}{arg1, arg2, arg3})
	stub := fake.GetParametersByPathStub
	fakeReturns := fake.getParametersByPathReturns
	fake.recordInvocation("GetParametersByPath", []interface{}{arg1, arg2, arg3})
	fake.getParametersByPathMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSsmAPI) GetParametersByPathCallCount() int {
	fake.getParametersByPathMutex.RLock()
	defer fake.getParametersByPathMutex.RUnlock()
	return len(fake.getParametersByPathArgsForCall)
}

func (fake *FakeSsmAPI) GetParametersByPathCalls(stub func(context.Context, *ssma.GetParametersByPathInput, ...func(*ssma.Options)) (*ssma.GetParametersByPathOutput, error)) {
	fake.getParametersByPathMutex.Lock()
	defer fake.getParametersByPathMutex.Unlock()
	fake.GetParametersByPathStub = stub
}

func (fake *FakeSsmAPI) GetParametersByPathArgsForCall(i int) (context.Context, *ssma.GetParametersByPathInput, []func(*ssma.Options)) {
	fake.getParametersByPathMutex.RLock()
	defer fake.getParametersByPathMutex.RUnlock()
	argsForCall := fake.getParametersByPathArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSsmAPI) GetParametersByPathReturns(result1 *ssma.GetParametersByPathOutput, result2 error) {
	fake.getParametersByPathMutex.Lock()
	defer fake.getParametersByPathMutex.Unlock()
	fake.GetParametersByPathStub = nil
	fake.getParametersByPathReturns = struct {
		result1 *ssma.GetParametersByPathOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSsmAPI) GetParametersByPathReturnsOnCall(i int, result1 *ssma.GetParametersByPathOutput, result2 error) {
	fake.getParametersByPathMutex.Lock()
	defer fake.getParametersByPathMutex.Unlock()
	fake.GetParametersByPathStub = nil
	if fake.getParametersByPathReturnsOnCall == nil {
		fake.getParametersByPathReturnsOnCall = make(map[int]struct {
			result1 *ssma.GetParametersByPathOutput
			result2 error
		})
	}
	fake.getParametersByPathReturnsOnCall[i] = struct {
		result1 *ssma.GetParametersByPathOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSsmAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getParameterMutex.RLock()
	defer fake.getParameterMutex.RUnlock()
	fake.getParametersByPathMutex.RLock()
	defer fake.getParametersByPathMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSsmAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ssm.SsmAPI = new(FakeSsmAPI)
