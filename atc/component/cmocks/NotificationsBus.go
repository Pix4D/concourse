// Code generated by mockery v2.53.0. DO NOT EDIT.

package cmocks

import (
	db "github.com/concourse/concourse/atc/db"
	mock "github.com/stretchr/testify/mock"
)

// NotificationsBus is an autogenerated mock type for the NotificationsBus type
type NotificationsBus struct {
	mock.Mock
}

// Listen provides a mock function with given fields: _a0, _a1
func (_m *NotificationsBus) Listen(_a0 string, _a1 int) (chan db.Notification, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Listen")
	}

	var r0 chan db.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) (chan db.Notification, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, int) chan db.Notification); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan db.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unlisten provides a mock function with given fields: _a0, _a1
func (_m *NotificationsBus) Unlisten(_a0 string, _a1 chan db.Notification) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Unlisten")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, chan db.Notification) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewNotificationsBus creates a new instance of NotificationsBus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationsBus(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationsBus {
	mock := &NotificationsBus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
