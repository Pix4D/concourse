// Code generated by counterfeiter. DO NOT EDIT.
package runtimefakes

import (
	"sync"

	"github.com/concourse/concourse/worker/runtime"
	"github.com/containerd/containerd/v2/pkg/cio"
)

type FakeIOManager struct {
	AttachStub        func(string, string, cio.Attach) cio.Attach
	attachMutex       sync.RWMutex
	attachArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 cio.Attach
	}
	attachReturns struct {
		result1 cio.Attach
	}
	attachReturnsOnCall map[int]struct {
		result1 cio.Attach
	}
	CreatorStub        func(string, string, cio.Creator) cio.Creator
	creatorMutex       sync.RWMutex
	creatorArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 cio.Creator
	}
	creatorReturns struct {
		result1 cio.Creator
	}
	creatorReturnsOnCall map[int]struct {
		result1 cio.Creator
	}
	DeleteStub        func(string)
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 string
	}
	GetStub        func(string, string) (cio.IO, bool)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getReturns struct {
		result1 cio.IO
		result2 bool
	}
	getReturnsOnCall map[int]struct {
		result1 cio.IO
		result2 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIOManager) Attach(arg1 string, arg2 string, arg3 cio.Attach) cio.Attach {
	fake.attachMutex.Lock()
	ret, specificReturn := fake.attachReturnsOnCall[len(fake.attachArgsForCall)]
	fake.attachArgsForCall = append(fake.attachArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 cio.Attach
	}{arg1, arg2, arg3})
	stub := fake.AttachStub
	fakeReturns := fake.attachReturns
	fake.recordInvocation("Attach", []interface{}{arg1, arg2, arg3})
	fake.attachMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIOManager) AttachCallCount() int {
	fake.attachMutex.RLock()
	defer fake.attachMutex.RUnlock()
	return len(fake.attachArgsForCall)
}

func (fake *FakeIOManager) AttachCalls(stub func(string, string, cio.Attach) cio.Attach) {
	fake.attachMutex.Lock()
	defer fake.attachMutex.Unlock()
	fake.AttachStub = stub
}

func (fake *FakeIOManager) AttachArgsForCall(i int) (string, string, cio.Attach) {
	fake.attachMutex.RLock()
	defer fake.attachMutex.RUnlock()
	argsForCall := fake.attachArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIOManager) AttachReturns(result1 cio.Attach) {
	fake.attachMutex.Lock()
	defer fake.attachMutex.Unlock()
	fake.AttachStub = nil
	fake.attachReturns = struct {
		result1 cio.Attach
	}{result1}
}

func (fake *FakeIOManager) AttachReturnsOnCall(i int, result1 cio.Attach) {
	fake.attachMutex.Lock()
	defer fake.attachMutex.Unlock()
	fake.AttachStub = nil
	if fake.attachReturnsOnCall == nil {
		fake.attachReturnsOnCall = make(map[int]struct {
			result1 cio.Attach
		})
	}
	fake.attachReturnsOnCall[i] = struct {
		result1 cio.Attach
	}{result1}
}

func (fake *FakeIOManager) Creator(arg1 string, arg2 string, arg3 cio.Creator) cio.Creator {
	fake.creatorMutex.Lock()
	ret, specificReturn := fake.creatorReturnsOnCall[len(fake.creatorArgsForCall)]
	fake.creatorArgsForCall = append(fake.creatorArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 cio.Creator
	}{arg1, arg2, arg3})
	stub := fake.CreatorStub
	fakeReturns := fake.creatorReturns
	fake.recordInvocation("Creator", []interface{}{arg1, arg2, arg3})
	fake.creatorMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIOManager) CreatorCallCount() int {
	fake.creatorMutex.RLock()
	defer fake.creatorMutex.RUnlock()
	return len(fake.creatorArgsForCall)
}

func (fake *FakeIOManager) CreatorCalls(stub func(string, string, cio.Creator) cio.Creator) {
	fake.creatorMutex.Lock()
	defer fake.creatorMutex.Unlock()
	fake.CreatorStub = stub
}

func (fake *FakeIOManager) CreatorArgsForCall(i int) (string, string, cio.Creator) {
	fake.creatorMutex.RLock()
	defer fake.creatorMutex.RUnlock()
	argsForCall := fake.creatorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIOManager) CreatorReturns(result1 cio.Creator) {
	fake.creatorMutex.Lock()
	defer fake.creatorMutex.Unlock()
	fake.CreatorStub = nil
	fake.creatorReturns = struct {
		result1 cio.Creator
	}{result1}
}

func (fake *FakeIOManager) CreatorReturnsOnCall(i int, result1 cio.Creator) {
	fake.creatorMutex.Lock()
	defer fake.creatorMutex.Unlock()
	fake.CreatorStub = nil
	if fake.creatorReturnsOnCall == nil {
		fake.creatorReturnsOnCall = make(map[int]struct {
			result1 cio.Creator
		})
	}
	fake.creatorReturnsOnCall[i] = struct {
		result1 cio.Creator
	}{result1}
}

func (fake *FakeIOManager) Delete(arg1 string) {
	fake.deleteMutex.Lock()
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DeleteStub
	fake.recordInvocation("Delete", []interface{}{arg1})
	fake.deleteMutex.Unlock()
	if stub != nil {
		fake.DeleteStub(arg1)
	}
}

func (fake *FakeIOManager) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeIOManager) DeleteCalls(stub func(string)) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeIOManager) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIOManager) Get(arg1 string, arg2 string) (cio.IO, bool) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1, arg2})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIOManager) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeIOManager) GetCalls(stub func(string, string) (cio.IO, bool)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeIOManager) GetArgsForCall(i int) (string, string) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIOManager) GetReturns(result1 cio.IO, result2 bool) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 cio.IO
		result2 bool
	}{result1, result2}
}

func (fake *FakeIOManager) GetReturnsOnCall(i int, result1 cio.IO, result2 bool) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 cio.IO
			result2 bool
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 cio.IO
		result2 bool
	}{result1, result2}
}

func (fake *FakeIOManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIOManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ runtime.IOManager = new(FakeIOManager)
